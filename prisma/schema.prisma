generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Media         Media[]
  Project       Project[]
  Render        Render[]
}


model Media {
  id            String          @id @default(cuid())
  name          String
  url           String
  thumbnail     String?
  UserId       String 
  User          User            @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProjectMedia ProjectMedia[]
}

model Project {
  id            String          @id @default(cuid())
  name          String
  UserId       String
  User          User           @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ProjectMedia ProjectMedia[]
  Render        Render[]
}

model ProjectMedia {
  id         String       @id @default(cuid())
  name       String?
  ProjectId String 
  MediaId   String 
  Media      Media        @relation(fields: [MediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Project    Project      @relation(fields: [ProjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Segment    Segment[]
  Transcript Transcript[]
}

model Render {
  id         String  @id @default(cuid())
  name       String?
  url        String
  UserId    String
  ProjectId String
  Project    Project @relation(fields: [ProjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User    @relation(fields: [UserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Segment {
  id               String        @id @default(cuid())
  start_index      Int?
  end_index        Int?
  start_time       Int?
  end_time         Int?
  color            String?
  ProjectMediaId String 
  index            Int?
  text             String?
  ProjectMedia    ProjectMedia @relation(fields: [ProjectMediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model Transcript {
  id               String        @id @default(cuid())
  text             String?
  words            Json?         @db.Json
  ProjectMediaId String 
  ProjectMedia    ProjectMedia @relation(fields: [ProjectMediaId], references: [id], onDelete: NoAction, onUpdate: NoAction)

}

model Account {
  id                 String  @id @default(cuid())
  UserId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  User User @relation(fields: [UserId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  UserId       String
  expires      DateTime
  User         User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}